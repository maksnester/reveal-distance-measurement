{"version":3,"sources":["App.tsx","index.tsx"],"names":["addWASDHandling","cameraControls","KEYCODE","wKey","holdEvent","aKey","sKey","dKey","addEventListener","event","truck","deltaTime","forward","leftKey","rightKey","upKey","downKey","rotate","THREE","DEG2RAD","getNormalizedCoords","domElement","rect","getBoundingClientRect","x","clientX","left","clientWidth","y","clientY","top","clientHeight","createSphere","point","color","sphere","position","copy","getMiddlePoint","p1","p2","z","CameraControls","install","App","canvas","useRef","distanceLabel","useState","measuredDistance","setMeasuredDistance","useEffect","a","current","client","CogniteClient","appId","loginWithOAuth","project","scene","isRenderRequired","revealManager","RevealManager","addModelFromUrl","window","location","origin","process","model","add","light","renderer","width","Math","ceil","innerWidth","height","innerHeight","setClearColor","setSize","suggestCameraConfig","target","near","far","camera","controls","setLookAt","htmlOverlayHelper","utilities","HtmlOverlayHelper","clock","render","delta","getDelta","update","updatePositions","requestAnimationFrame","points","line","altKey","coords","revealPickResult","intersectCadNodes","pointMesh","requestNodeUpdate","treeIndex","remove","removeOverlayElement","push","length","material","geometry","setFromPoints","map","p","addOverlayElement","distanceTo","toFixed","style","maxHeight","maxWidth","overflow","ref","display","marginTop","padding","pointerEvents","background","borderRadius","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1b74660.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { CogniteClient } from \"@cognite/sdk\";\nimport * as THREE from \"three\";\nimport {\n  CadNode,\n  intersectCadNodes,\n  RevealManager,\n  utilities,\n} from \"@cognite/reveal/experimental\";\nimport CameraControls from \"camera-controls\";\nimport { Scene, WebGLRenderer } from \"three\";\nimport * as holdEvent from \"hold-event\";\n\nCameraControls.install({ THREE });\n\nfunction addWASDHandling(cameraControls: CameraControls) {\n  const KEYCODE = {\n    W: 87,\n    A: 65,\n    S: 83,\n    D: 68,\n    ARROW_LEFT: 37,\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n  };\n\n  const wKey = new holdEvent.KeyboardKeyHold(KEYCODE.W, 100);\n  const aKey = new holdEvent.KeyboardKeyHold(KEYCODE.A, 100);\n  const sKey = new holdEvent.KeyboardKeyHold(KEYCODE.S, 100);\n  const dKey = new holdEvent.KeyboardKeyHold(KEYCODE.D, 100);\n  aKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.truck(-0.05 * event.deltaTime, 0, true);\n  });\n  dKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.truck(0.05 * event.deltaTime, 0, true);\n  });\n  wKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.forward(0.05 * event.deltaTime, true);\n  });\n  sKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.forward(-0.05 * event.deltaTime, true);\n  });\n\n  const leftKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_LEFT, 100);\n  const rightKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_RIGHT, 100);\n  const upKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_UP, 100);\n  const downKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_DOWN, 100);\n  leftKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      -0.1 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      0,\n      true\n    );\n  });\n  rightKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0.1 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      0,\n      true\n    );\n  });\n  upKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0,\n      -0.05 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      true\n    );\n  });\n  downKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0,\n      0.05 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      true\n    );\n  });\n}\n\nfunction getNormalizedCoords(\n  event: MouseEvent,\n  domElement: HTMLCanvasElement\n): { x: number; y: number } {\n  const rect = domElement.getBoundingClientRect();\n  const x = ((event.clientX - rect.left) / domElement.clientWidth) * 2 - 1;\n  const y = ((event.clientY - rect.top) / domElement.clientHeight) * -2 + 1;\n  return { x, y };\n}\n\nfunction createSphere(point: THREE.Vector3, color: string): THREE.Mesh {\n  const sphere = new THREE.Mesh(\n    new THREE.SphereGeometry(0.1),\n    new THREE.MeshPhongMaterial({ color })\n  );\n  sphere.position.copy(point);\n  return sphere;\n}\n\nfunction getMiddlePoint(p1: THREE.Vector3, p2: THREE.Vector3) {\n  const x = (p2.x + p1.x) / 2;\n  const y = (p2.y + p1.y) / 2;\n  const z = (p2.z + p1.z) / 2;\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction App() {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const distanceLabel = useRef<HTMLDivElement>(null);\n  const [measuredDistance, setMeasuredDistance] = useState<any>();\n\n  useEffect(() => {\n    let scene: Scene | undefined;\n    let renderer: WebGLRenderer | undefined;\n    (async () => {\n      if (!canvas.current || !distanceLabel.current) {\n        return;\n      }\n\n      const client = new CogniteClient({ appId: \"reveal.example.measurement\" });\n      client.loginWithOAuth({ project: \"publicdata\" });\n\n      const scene = new THREE.Scene();\n      let isRenderRequired = true;\n      const revealManager = new RevealManager(client, () => {\n        isRenderRequired = true;\n      });\n\n      const model: CadNode = await revealManager.addModelFromUrl(\n        `${window.location.origin}${process.env.PUBLIC_URL}/primitives`\n      );\n      scene.add(model);\n\n      // without light there is no colors for custom geometry (like our spheres)\n      var light = new THREE.AmbientLight(0xffffff); // soft white light\n      scene.add(light);\n\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvas.current,\n      });\n      const width = Math.ceil(window.innerWidth * 0.75);\n      const height = Math.ceil(window.innerHeight * 0.75);\n\n      renderer.setClearColor(\"#444\");\n      renderer.setSize(width, height);\n\n      const { position, target, near, far } = model.suggestCameraConfig();\n      const camera = new THREE.PerspectiveCamera(75, width / height, near, far);\n      const controls = new CameraControls(camera, renderer.domElement);\n      controls.setLookAt(\n        position.x,\n        position.y,\n        position.z,\n        target.x,\n        target.y,\n        target.z\n      );\n\n      addWASDHandling(controls);\n\n      // controls.update(0.0); // rm ??? why do I need this\n      // camera.updateMatrixWorld(); // rm ??? why do I need this\n\n      const htmlOverlayHelper = new utilities.HtmlOverlayHelper();\n\n      const clock = new THREE.Clock();\n\n      const render = () => {\n        const delta = clock.getDelta();\n        const controlsNeedUpdate = controls.update(delta);\n        if (controlsNeedUpdate) {\n          isRenderRequired = true;\n          revealManager.update(camera);\n        }\n        if (isRenderRequired) {\n          renderer.render(scene, camera);\n          htmlOverlayHelper.updatePositions(renderer, camera);\n          isRenderRequired = false;\n        }\n        requestAnimationFrame(render);\n      };\n      revealManager.update(camera);\n      render();\n\n      let points: Array<THREE.Mesh> = [];\n      let line: THREE.Line | null = null;\n\n      // add point on alt+click\n      renderer.domElement.addEventListener(\"mousedown\", (event: MouseEvent) => {\n        if (!event.altKey) {\n          return;\n        }\n        const coords = getNormalizedCoords(event, renderer.domElement);\n\n        // Pick in Reveal\n        const revealPickResult = (() => {\n          const intersections = intersectCadNodes([model], {\n            renderer,\n            camera,\n            coords,\n          });\n          return intersections[0];\n        })();\n\n        if (revealPickResult) {\n          const pointMesh = createSphere(revealPickResult.point, \"#f5f500\");\n          scene.add(pointMesh);\n          model.requestNodeUpdate([revealPickResult.treeIndex]);\n          isRenderRequired = true;\n\n          if (line) {\n            scene.remove(...points);\n            scene.remove(line);\n            line = null;\n            points = [];\n            setMeasuredDistance(0);\n            htmlOverlayHelper.removeOverlayElement(distanceLabel.current!);\n          }\n\n          points.push(pointMesh);\n\n          if (points.length === 2) {\n            const material = new THREE.LineBasicMaterial({ color: 0xffff00 });\n            const geometry = new THREE.BufferGeometry().setFromPoints(\n              points.map((p) => p.position)\n            );\n            line = new THREE.Line(geometry, material);\n            scene.add(line);\n\n            htmlOverlayHelper.addOverlayElement(\n              distanceLabel.current!,\n              getMiddlePoint(points[0].position, points[1].position)\n            );\n            setMeasuredDistance(\n              points[0].position.distanceTo(points[1].position).toFixed(4)\n            );\n\n            isRenderRequired = true;\n          }\n        }\n      });\n    })();\n\n    return () => {\n      scene?.dispose();\n      renderer?.dispose();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Distance measurement</h1>\n      <h4>Hold \"ALT\" and click to add point</h4>\n      <div>\n        <div\n          style={{\n            maxHeight: \"90vh\",\n            maxWidth: \"fit-content\",\n            position: \"relative\",\n            overflow: \"hidden\",\n          }}\n        >\n          <canvas ref={canvas} style={{ display: \"block\" }} />\n          <div\n            ref={distanceLabel}\n            style={{\n              marginTop: \"-25px\",\n              padding: \"3px\",\n              position: \"absolute\",\n              pointerEvents: \"none\",\n              top: \"298px\",\n              left: \"395px\",\n              color: \"rgb(255, 255, 255)\",\n              background: \"rgba(35, 35, 35, 0.855)\",\n              borderRadius: \"15%\",\n              display: measuredDistance ? \"block\" : \"none\",\n            }}\n          >\n            {measuredDistance}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}