{"version":3,"sources":["App.tsx","index.tsx"],"names":["addWASDHandling","cameraControls","KEYCODE","wKey","holdEvent","aKey","sKey","dKey","addEventListener","event","truck","deltaTime","forward","leftKey","rightKey","upKey","downKey","rotate","THREE","DEG2RAD","getNormalizedCoords","domElement","e","touches","rect","getBoundingClientRect","x","clientX","left","clientWidth","y","clientY","top","clientHeight","createSphere","point","color","sphere","position","copy","getMiddlePoint","p1","p2","z","CameraControls","install","App","canvas","useRef","distanceLabel","useState","measuredDistance","setMeasuredDistance","useEffect","a","current","client","CogniteClient","appId","loginWithOAuth","project","scene","isRenderRequired","revealManager","RevealManager","addModelFromUrl","window","location","origin","process","model","add","light","renderer","width","Math","ceil","innerWidth","height","innerHeight","setPixelRatio","devicePixelRatio","setClearColor","setSize","suggestCameraConfig","target","near","far","camera","controls","setLookAt","htmlOverlayHelper","utilities","HtmlOverlayHelper","clock","render","delta","getDelta","update","updatePositions","requestAnimationFrame","points","line","addMeasurePoint","button","LEFT","coords","revealPickResult","intersectCadNodes","pointMesh","requestNodeUpdate","treeIndex","remove","removeOverlayElement","push","length","material","geometry","setFromPoints","map","p","addOverlayElement","distanceTo","toFixed","style","maxWidth","overflow","ref","display","padding","pointerEvents","background","borderRadius","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c31ab3e.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport { CogniteClient } from \"@cognite/sdk\";\nimport * as THREE from \"three\";\nimport {\n  CadNode,\n  intersectCadNodes,\n  RevealManager,\n  utilities,\n} from \"@cognite/reveal/experimental\";\nimport CameraControls from \"camera-controls\";\nimport { Scene, WebGLRenderer } from \"three\";\nimport * as holdEvent from \"hold-event\";\n\nCameraControls.install({ THREE });\n\nfunction addWASDHandling(cameraControls: CameraControls) {\n  const KEYCODE = {\n    W: 87,\n    A: 65,\n    S: 83,\n    D: 68,\n    ARROW_LEFT: 37,\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n  };\n\n  const wKey = new holdEvent.KeyboardKeyHold(KEYCODE.W, 100);\n  const aKey = new holdEvent.KeyboardKeyHold(KEYCODE.A, 100);\n  const sKey = new holdEvent.KeyboardKeyHold(KEYCODE.S, 100);\n  const dKey = new holdEvent.KeyboardKeyHold(KEYCODE.D, 100);\n  aKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.truck(-0.05 * event.deltaTime, 0, true);\n  });\n  dKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.truck(0.05 * event.deltaTime, 0, true);\n  });\n  wKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.forward(0.05 * event.deltaTime, true);\n  });\n  sKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.forward(-0.05 * event.deltaTime, true);\n  });\n\n  const leftKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_LEFT, 100);\n  const rightKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_RIGHT, 100);\n  const upKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_UP, 100);\n  const downKey = new holdEvent.KeyboardKeyHold(KEYCODE.ARROW_DOWN, 100);\n  leftKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      -0.1 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      0,\n      true\n    );\n  });\n  rightKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0.1 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      0,\n      true\n    );\n  });\n  upKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0,\n      -0.05 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      true\n    );\n  });\n  downKey.addEventListener(\"holding\", function (event: any) {\n    cameraControls.rotate(\n      0,\n      0.05 * THREE.MathUtils.DEG2RAD * event.deltaTime,\n      true\n    );\n  });\n}\n\nfunction getNormalizedCoords(\n  event: MouseEvent | TouchEvent,\n  domElement: HTMLCanvasElement\n): { x: number; y: number } {\n  const e = 'clientX' in event ? event : event.touches[0]\n  const rect = domElement.getBoundingClientRect();\n  const x = ((e.clientX - rect.left) / domElement.clientWidth) * 2 - 1;\n  const y = ((e.clientY - rect.top) / domElement.clientHeight) * -2 + 1;\n  return { x, y };\n}\n\nfunction createSphere(point: THREE.Vector3, color: string): THREE.Mesh {\n  const sphere = new THREE.Mesh(\n    new THREE.SphereGeometry(0.1),\n    new THREE.MeshPhongMaterial({ color })\n  );\n  sphere.position.copy(point);\n  return sphere;\n}\n\nfunction getMiddlePoint(p1: THREE.Vector3, p2: THREE.Vector3) {\n  const x = (p2.x + p1.x) / 2;\n  const y = (p2.y + p1.y) / 2;\n  const z = (p2.z + p1.z) / 2;\n  return new THREE.Vector3(x, y, z);\n}\n\nfunction App() {\n  const canvas = useRef<HTMLCanvasElement>(null);\n  const distanceLabel = useRef<HTMLDivElement>(null);\n  const [measuredDistance, setMeasuredDistance] = useState<any>();\n\n  useEffect(() => {\n    let scene: Scene | undefined;\n    let renderer: WebGLRenderer | undefined;\n    (async () => {\n      if (!canvas.current || !distanceLabel.current) {\n        return;\n      }\n\n      const client = new CogniteClient({ appId: \"reveal.example.measurement\" });\n      client.loginWithOAuth({ project: \"publicdata\" });\n\n      const scene = new THREE.Scene();\n      let isRenderRequired = true;\n      const revealManager = new RevealManager(client, () => {\n        isRenderRequired = true;\n      });\n\n      const model: CadNode = await revealManager.addModelFromUrl(\n        `${window.location.origin}${process.env.PUBLIC_URL}/primitives`\n      );\n      scene.add(model);\n\n      // without light there is no colors for custom geometry (like our spheres)\n      var light = new THREE.AmbientLight(0xffffff); // soft white light\n      scene.add(light);\n\n      const renderer = new THREE.WebGLRenderer({\n        canvas: canvas.current,\n      });\n      const width = Math.ceil(window.innerWidth * 0.75);\n      const height = Math.ceil(window.innerHeight * 0.75);\n\n      renderer.setPixelRatio(window.devicePixelRatio);\n      renderer.setClearColor(\"#444\");\n      renderer.setSize(width, height);\n\n      const { position, target, near, far } = model.suggestCameraConfig();\n      const camera = new THREE.PerspectiveCamera(75, width / height, near, far);\n      const controls = new CameraControls(camera, renderer.domElement);\n      controls.setLookAt(\n        position.x,\n        position.y,\n        position.z,\n        target.x,\n        target.y,\n        target.z\n      );\n\n      addWASDHandling(controls);\n\n      const htmlOverlayHelper = new utilities.HtmlOverlayHelper();\n\n      const clock = new THREE.Clock();\n\n      const render = () => {\n        const delta = clock.getDelta();\n        const controlsNeedUpdate = controls.update(delta);\n        if (controlsNeedUpdate) {\n          isRenderRequired = true;\n          revealManager.update(camera);\n        }\n        if (isRenderRequired) {\n          renderer.render(scene, camera);\n          htmlOverlayHelper.updatePositions(renderer, camera);\n          isRenderRequired = false;\n        }\n        requestAnimationFrame(render);\n      };\n      revealManager.update(camera);\n      render();\n\n      let points: Array<THREE.Mesh> = [];\n      let line: THREE.Line | null = null;\n\n      const addMeasurePoint = (event: MouseEvent | TouchEvent) => {\n        if ('button' in event && event.button !== THREE.MOUSE.LEFT) {\n          return;\n        }\n        const coords = getNormalizedCoords(event, renderer.domElement);\n\n        // Pick in Reveal\n        const revealPickResult = (() => {\n          const intersections = intersectCadNodes([model], {\n            renderer,\n            camera,\n            coords,\n          });\n          return intersections[0];\n        })();\n\n        if (revealPickResult) {\n          const pointMesh = createSphere(revealPickResult.point, \"#f5f500\");\n          scene.add(pointMesh);\n          model.requestNodeUpdate([revealPickResult.treeIndex]);\n          isRenderRequired = true;\n\n          if (line) {\n            scene.remove(...points);\n            scene.remove(line);\n            line = null;\n            points = [];\n            setMeasuredDistance(0);\n            htmlOverlayHelper.removeOverlayElement(distanceLabel.current!);\n          }\n\n          points.push(pointMesh);\n\n          if (points.length === 2) {\n            const material = new THREE.LineBasicMaterial({ color: 0xffff00 });\n            const geometry = new THREE.BufferGeometry().setFromPoints(\n              points.map((p) => p.position)\n            );\n            line = new THREE.Line(geometry, material);\n            scene.add(line);\n\n            htmlOverlayHelper.addOverlayElement(\n              distanceLabel.current!,\n              getMiddlePoint(points[0].position, points[1].position)\n            );\n            setMeasuredDistance(\n              points[0].position.distanceTo(points[1].position).toFixed(4)\n            );\n\n            isRenderRequired = true;\n          }\n        }\n      }\n      renderer.domElement.addEventListener(\"mousedown\", addMeasurePoint);\n      renderer.domElement.addEventListener(\"touchstart\", addMeasurePoint);\n    })();\n\n    return () => {\n      scene?.dispose();\n      renderer?.dispose();\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Distance measurement</h1>\n      <h4>Hold \"ALT\" and click to add point.</h4>\n      <div>\n        <div\n          style={{\n            maxWidth: \"fit-content\",\n            position: \"relative\",\n            overflow: \"hidden\",\n          }}\n        >\n          <canvas ref={canvas} style={{ display: \"block\" }} />\n          <div\n            ref={distanceLabel}\n            style={{\n              padding: \"3px\",\n              position: \"absolute\",\n              pointerEvents: \"none\",\n              color: \"rgb(255, 255, 255)\",\n              background: \"rgba(35, 35, 35, 0.855)\",\n              borderRadius: \"15%\",\n              display: measuredDistance ? \"block\" : \"none\",\n            }}\n          >\n            {measuredDistance}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}